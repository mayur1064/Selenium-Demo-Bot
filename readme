@Configuration
@EnableWebSecurity
public class SecurityConfig extends WebSecurityConfigurerAdapter {

    private static final Set<String> ALLOWED_USERS = Set.of(
        "user1@yourdomain.com",
        "user2@yourdomain.com"
    );

    @Override
    protected void configure(HttpSecurity http) throws Exception {
        http
            .authorizeRequests()
                .antMatchers("/login**", "/error**").permitAll()
                .anyRequest().authenticated()
            .and()
            .oauth2Login()
                .defaultSuccessUrl("/", true)
                .userInfoEndpoint()
                .userService(this.oauth2UserService())
            .and()
            .and()
            .logout()
                .logoutSuccessUrl("/")
            .and()
            .csrf().disable();

        // Disable form login
        http.formLogin().disable();
    }

    private OAuth2UserService<OAuth2UserRequest, OAuth2User> oauth2UserService() {
        return request -> {
            DefaultOAuth2UserService delegate = new DefaultOAuth2UserService();
            OAuth2User user = delegate.loadUser(request);

            String username = user.getAttribute("preferred_username"); // or "email"
            if (!ALLOWED_USERS.contains(username)) {
                throw new AccessDeniedException("User not authorized");
            }

            return new DefaultOAuth2User(
                user.getAuthorities(),
                user.getAttributes(),
                "preferred_username" // or "email"
            );
        };
    }
}
