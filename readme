import org.apache.http.client.HttpClient;
import org.apache.http.conn.ssl.SSLConnectionSocketFactory;
import org.apache.http.impl.client.CloseableHttpClient;
import org.apache.http.impl.client.HttpClients;
import org.apache.http.ssl.SSLContextBuilder;
import org.springframework.boot.web.client.RestTemplateBuilder;
import org.springframework.http.client.ClientHttpRequestFactory;
import org.springframework.http.client.HttpComponentsClientHttpRequestFactory;
import org.springframework.web.client.RestTemplate;

import java.io.File;

public class RestTemplateFactory {

    public RestTemplateBuilder createRestTemplateBuilder(String certFilePath, String keyFilePath, String password) throws Exception {
        // Build SSLContext using certificate and key file
        var sslContext = SSLContextBuilder.create()
                .loadKeyMaterial(
                        new File(certFilePath),        // Path to the certificate file (e.g., .crt or .pem)
                        new File(keyFilePath),        // Path to the private key file (e.g., .key)
                        password.toCharArray()        // Password for the key file, if required
                )
                .build();

        // Create SSLConnectionSocketFactory
        SSLConnectionSocketFactory socketFactory = new SSLConnectionSocketFactory(sslContext);

        // Create HttpClient with the custom SSL socket factory
        CloseableHttpClient httpClient = HttpClients.custom()
                .setSSLSocketFactory(socketFactory)
                .build();

        // Wrap HttpClient in a ClientHttpRequestFactory
        ClientHttpRequestFactory requestFactory = new HttpComponentsClientHttpRequestFactory(httpClient);

        // Create and return RestTemplateBuilder with the custom request factory
        return new RestTemplateBuilder()
                .requestFactory(() -> requestFactory);
    }
}
