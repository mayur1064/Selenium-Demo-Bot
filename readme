import javax.servlet.FilterChain;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.springframework.web.filter.OncePerRequestFilter;

import java.io.IOException;

public class HeaderCheckFilter extends OncePerRequestFilter {
    
    @Override
    protected void doFilterInternal(HttpServletRequest request,
                                    HttpServletResponse response,
                                    FilterChain filterChain)
                                    throws ServletException, IOException {
        
        String myHeader = request.getHeader("X-My-Header");

        if (myHeader == null || !myHeader.equals("expectedValue")) {
            response.sendError(HttpServletResponse.SC_BAD_REQUEST, "Missing or invalid X-My-Header");
            return;
        }

        filterChain.doFilter(request, response); // continue the chain
    }
}


@Override
protected void doFilterInternal(HttpServletRequest request,
                                HttpServletResponse response,
                                FilterChain filterChain)
                                throws ServletException, IOException {
    
    String path = request.getRequestURI();

    if (path.equals("/instances")) {
        String myHeader = request.getHeader("X-My-Header");
        if (myHeader == null || !myHeader.equals("expectedValue")) {
            response.sendError(HttpServletResponse.SC_BAD_REQUEST, "Missing or invalid X-My-Header");
            return;
        }
    }

    filterChain.doFilter(request, response); // continue the chain
}

import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;

@Configuration
public class SecurityConfig extends WebSecurityConfigurerAdapter {

    @Override
    protected void configure(HttpSecurity http) throws Exception {
        http
            .addFilterBefore(new HeaderCheckFilter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.class)
            .authorizeRequests()
                .anyRequest().authenticated();
    }
}
