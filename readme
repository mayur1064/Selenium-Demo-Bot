import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;
import org.springframework.security.oauth2.core.oidc.user.OidcUser;
import org.springframework.security.web.util.matcher.AntPathRequestMatcher;

import java.util.Set;

@Configuration
public class SecurityConfig extends WebSecurityConfigurerAdapter {

    private static final Set<String> ALLOWED_USERNAMES = Set.of(
            "user1@yourdomain.com",
            "user2@yourdomain.com"
    );

    @Override
    protected void configure(HttpSecurity http) throws Exception {
        http
            .authorizeRequests()
                .antMatchers("/assets/**", "/login**").permitAll()
                .anyRequest().access((authentication, object) -> {
                    if (authentication.getPrincipal() instanceof OidcUser) {
                        OidcUser oidcUser = (OidcUser) authentication.getPrincipal();
                        String username = oidcUser.getEmail();
                        return ALLOWED_USERNAMES.contains(username)
                                ? org.springframework.security.access.AccessDecisionVoter.ACCESS_GRANTED
                                : org.springframework.security.access.AccessDecisionVoter.ACCESS_DENIED;
                    }
                    return org.springframework.security.access.AccessDecisionVoter.ACCESS_DENIED;
                })
            .and()
            .oauth2Login()
            .and()
            .logout()
                .logoutRequestMatcher(new AntPathRequestMatcher("/logout"))
                .logoutSuccessUrl("/")
                .permitAll();
    }
}


import org.springframework.security.oauth2.client.oidc.userinfo.OidcUserRequest;
import org.springframework.security.oauth2.core.oidc.user.OidcUser;
import org.springframework.security.oauth2.client.oidc.userinfo.OidcUserService;

private OidcUser checkAllowedUser(OidcUserRequest userRequest) {
    OidcUserService delegate = new OidcUserService();
    OidcUser oidcUser = delegate.loadUser(userRequest);

    String username = oidcUser.getEmail(); // try getPreferredUsername() if this is null

    Set<String> allowed = Set.of("user1@yourdomain.com", "user2@yourdomain.com");
    if (!allowed.contains(username)) {
        throw new RuntimeException("Access denied: " + username);
    }

    return oidcUser;
}

